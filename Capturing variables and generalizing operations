import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

pd.set_option('display.max_columns', None)
pd.set_option('display.width',500)
df = sns.load_dataset("titanic")
df.head()
df.info()

def grab_col_names(dataframe, cat_th=10, car_th=20):
    """

    Parameters
    ----------
    dataframe : dataframe
      değişken isimleri alınmak istenen dataframe'dir.
    cat_th : int, float
      numerik fakat kategorik olan değişkenler için sınıf eşik değeri
    car_th : int, float
      kategorik fakat kardinal değişkenler için sınıf eşik değeri

    Returns
    -------
    car_cols: list
       kategorik değişken listesi
    num_cols: list
       numerik değişken listesi
    cat_but_car: list
       kategorik görünümlü kardinal değişken listesi

    Notes
    --------
    cat_cols +num_cols + cat_but_car = toplam değişken sayısı
    num_but_cat, cat_cols'un içerisinde
    """

    cat_cols = [col for col in df.columns if str(df[col].dtypes) in ["category", "object", "bool"]]
    num_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes in ["int", "float"]]
    cat_but_car = [col for col in df.columns if
                   df[col].nunique() > 20 and str(df[col].dtypes) in ["category", "object"]]
    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]
    num_cols = [col for col in df.columns if df[col].dtypes in ["int", "float"]]
    num_cols = [col for col in num_cols if col not in cat_cols]

    print(f"Observations:{dataframe.shape[0]}")
    print(f"Variables:{dataframe.shape[1]}")
    print(f'cat_cols:{len(cat_cols)}')
    print(f'num_cols:{len(num_cols)}')
    print(f'cat_but_car:{len(cat_but_car)}')
    print(f'num_but_cat:{len(num_but_cat)}')

    return cat_cols, num_cols, cat_but_car

cat_cols, num_cols, cat_but_car = grab_col_names(df)
def cat_summary(dataFrame, col_name):
    print(pd.DataFrame({col_name: dataFrame[col_name].value_counts(),
                        "Ratio": 100* dataFrame[col_name].value_counts()/len(dataFrame)}))
    print("###################################")

for col in cat_cols:
    cat_summary(df,col)

df = sns.load_dataset("titanic")
df.info()

for col in df.columns:
    if df[col].dtypes == "bool":
        df[col]=df[col].astype(int)

def num_summary(dataframe, numerical_col, plot=False):
    quantiles =[0.05,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00]
    print(dataframe[numerical_col].describe(quantiles).T)

    if plot:
        dataframe[numerical_col].hist()
        plt.xlabel(numerical_col)
        plt.title(numerical_col)
        plt.show(block=True)

for col in num_cols:
    num_summary(df,col,plot= True)

cat_cols, num_cols, cat_but_car = grab_col_names(df)

def cat_summary(dataFrame, col_name, plot=False):
    print(pd.DataFrame({col_name: dataFrame[col_name].value_counts(),
                        "Ratio": 100* dataFrame[col_name].value_counts()/len(dataFrame)}))
    print("###################################")

    if plot:
        sns.countplot(x=dataFrame[col_name], data = dataFrame)
        plt.show(block = True)

for col in cat_cols:
    cat_summary(df, col, plot= True)


********************************************************************************************************

df.groupby("sex")["survived"].mean()

def target_summary_with_cat(dataframe,target, categorical_col):
    print(pd.DataFrame({"TARGET_MEAN": dataframe.groupby(categorical_col)[target].mean()}))

target_summary_with_cat(df,"survived","sex")

for col in cat_cols:
    target_summary_with_cat(df,  "survived", col)

